// Drawing mixins

// generic drawing of more complex things

@function _backdrop_color($c) {
// adjusts colors for use in the backdrop state
// colors are darkened when using the dark theme so they aren't such a light grey
  @if $variant != 'light' { $c: darken($c, 7.5%); }
  @return transparentize(desaturate($c, 75%), .4);
}

// @function _widget_edge($c:$borders_edge) {
// // outer highlight "used" on most widgets
//   @if $c == none { @return none; }
//   @else { @return 0 1px $c; }
// }

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc:$selected_bg_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$selected_bg_color, _border_color($selected_bg_color), darken($fc, 35%)); }
}

// @function entry_focus_shadow($fc:$selected_bg_color) { @return /*0 0 2px 2px rgba(0, 0, 0, 0.025),*/ 0 0 2px 2px transparentize($fc, .85); }
@function entry_focus_shadow($fc:$selected_bg_color) { @return none; }

@mixin entry($t, $fc:$selected_bg_color, $c: $base_color, $tc: $text_color, $edge: none) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    $_bc: if($c == $headerbar_bg_color, $graphite, $c);
    color: if($tc != $text_color, transparentize($tc, .1), $text_color);
    border-color: if($c != $base_color, _border_color($_bc), $borders_color);
    background-color: $c;
    @include _shadows(entry_focus_shadow(transparentize($fc, 1)), $_entry_edge);
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    @include _shadows(entry_focus_shadow($fc), $_entry_edge);
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    $_bc: if($c == $headerbar_bg_color, $graphite, $c);
    color: if($tc != $text_color, mix($tc, $c, 50%), $insensitive_fg_color);
    border-color: $insensitive_borders_color; // $borders_color;
    background-color: if($c != $base_color, mix($c, if($c == $headerbar_bg_color, $headerbar_bg_color, $base_color), 85%), $insensitive_bg_color);
    box-shadow: $_entry_edge;
  }
  @if $t==backdrop {
    $_bc: if($c == $headerbar_bg_color, $graphite, $c);
    color: if($tc != $text_color, mix($tc, $c, 80%), $backdrop_text_color);
    border-color: if($c != $base_color, _border_color($c), $backdrop_borders_color);
    background-color: if($c != $base_color, lighten($c, 1%), $backdrop_base_color);
    box-shadow: $_blank_edge;
  }
  @if $t==backdrop-insensitive {
    $_bc: if($c == $headerbar_bg_color, $graphite, $c);
    color: if($c != $base_color, mix($tc, $c, 35%), $backdrop_insensitive_color);
    border-color: if($c != $base_color, _border_color($c), $backdrop_borders_color);
    background-color: if($c != $base_color, darken($c, 15%), $insensitive_bg_color);
    box-shadow: $_blank_edge;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    // text-shadow: 0 1px black;
    // -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    // text-shadow: 0 1px black;
    // -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    // text-shadow: none;
    // -gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    // text-shadow: none;
    // -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true {
    @if lightness($c)<40% { @return darken($c, 20%); }
    @else { @return darken($c, 10%); }
  }
  @else {
    @if lightness($c)<40% { @return darken($c, 15%); }
    @else { @return darken($c, 5%); }
  }
}

@function _text_shadow_color ($tc: $fg_color, $bg: $bg_color) {
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@function _button_hilight_color($c) {

// calculate the right hilight color for buttons
  @if lightness($c)>35% { @return transparentize(black, 0.95); }
  @else { @return transparentize(white, 0.85);}
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    -gtk-icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$button_bg_color, $tc:$fg_color, $flat:false) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $flat:  true/false
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//
  $_pressed: if(lightness($c)<15%, transparentize(black, 0.3), transparentize(black, 0.6));

  @if $t==normal {
  // normal button
  //
    color: $tc;
    background-color: $c;
    border-color: if($flat==true, $c, _border_color($c));

    @if $flat == false {
      border-bottom-color: darken($c, 30%);
      box-shadow: inset 0 -1px 1px _button_hilight_color($c);
    }
    @else {
      box-shadow: none;
    }
  }

  @else if $t==hover {
  // hovered button
  //
    $_bg: if(lightness($c)<35%, lighten($c, 10%), darken($c, 5%));
  //
    color: $tc;
    background-color: $_bg;
    -gtk-icon-effect: highlight;
    border-color: if($flat==true, if($c == $headerbar_bg_color, $_pressed, $_bg), _border_color($_bg));

    @if $flat == false {
      border-bottom-color: darken($_bg, 30%);
      box-shadow: inset 0 -1px 1px _button_hilight_color($_bg);
    }
    @else {
      box-shadow: none;
    }
  }

  @else if $t==active {
    // pushed button
    //
    $_bg: if(lightness($c)<35%, lighten($c, 10%), darken($c, 10%));
    //
    color: $tc;
    background-color: $_bg;
    border-color: if($flat==true, if($c == $headerbar_bg_color, $_pressed, $_bg), _border_color($_bg, $darker: true));

    label { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $tc); }

    box-shadow: inset 0 2px 3px -1px $_pressed;
    @if $flat == false {
      border-color: darken($_bg, 15%);
    }
  }

  @if $t==normal-alt {
  // normal button alternative look
  //
    color: $tc;
    background-color: $c;
    border-color: _border_color($c);
    border-top-color: darken($c, 30%);
    box-shadow: inset 0 1px 0px 0 $borders_edge;
  }

  @else if $t==hover-alt {
  // hovered button alternative look
  //
    color: $tc;
    background-color: $c;
    border-color: _border_color($c);
    border-top-color: darken($c, 30%);
    box-shadow: inset 0 1px 0px 0 $borders_edge;
  }

  @else if $t==insensitive {
  // insensitive button
  //
    $_bg: if($c != $button_bg_color, mix($c, if($c == $headerbar_bg_color, $headerbar_bg_color, $base_color), 85%), $insensitive_bg_color);
  //
    label, & { color: transparentize(if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color), if($tc == $headerbar_fg_color, 0.25, 0)); }
  //
    background-color: $_bg;
    border-color: if($flat==true, $_bg, _border_color($_bg));

    @if $flat==false {
      box-shadow: inset 0 -1px transparent;
    }
    @else {
      box-shadow: none;
    }
  }

  @else if $t==insensitive {
  // insensitive pushed button
  //
    $_bg: darken(mix($c, if($c==$headerbar_bg_color, $headerbar_bg_color, $base_color), 85%), 8%);
    label, & { color: if($c != $button_bg_color, mix($tc, $_bg, 60%), $insensitive_fg_color); }
  //
    background-color: $_bg;
    border-color: if($flat==true, $_bg, _border_color($_bg, $darker: true));
    @if $flat==false {
      box-shadow: inset 0 1px 3px -1px transparentize($_pressed, .1);
    }
    @else {
      box-shadow: none;
    }
  }

  @else if $t==backdrop {
  //
  // backdrop button
  //
    $_bg: null;
    $_bc: if($c != $button_bg_color, _backdrop_color(_border_color($c)), $backdrop_borders_color);
    @if $c==$headerbar_bg_color { $_bg: $backdrop_headerbar_bg_color; }
    @else { $_bg: if($c==$button_bg_color, $backdrop_bg_color, _backdrop_color($c)); }
  //
    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 60%), $backdrop_fg_color); }
  //
    box-shadow: none;
    background-color: $_bg;
    border-color: if($flat==true, $_bg, $_bc);
  }

  @else if $t==backdrop-active {
  //
  // backdrop pushed button
  //
    $_bg: null;
    $_bc: if($c != $button_bg_color, _backdrop_color(_border_color($c)), $backdrop_borders_color);
    @if $c==$headerbar_bg_color { $_bg: mix($c, $headerbar_bg_color, 85%); }
    @else { $_bg: mix(if($c == $button_bg_color, $backdrop_bg_color, _backdrop_color($c)), $base_color, 85%); }
  //
    label, & { color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color); }
  //
    box-shadow: none;
    background-color: $_bg;
    border-color: if($flat==true, $_bg, $_bc);
  }

  @else if $t==backdrop-insensitive {
  // backdrop insensitive button
  //
    $_bg: null;
    $_bc: if($c != $button_bg_color, _backdrop_color(_border_color($c)), $backdrop_borders_color);

    @if $c == $headerbar_bg_color {
      $_bg: transparent;
      background-image: none;
      text-shadow: none;
      -gtk-icon-shadow: none;
    }
    @else { $_bg: if($c == $button_bg_color, $insensitive_bg_color, mix(_backdrop_color($c), $base_color, 60%)); }
  //
    label, & { color: if($c != $button_bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color); }
  //
    background-color: $_bg;
    border-color: if($flat==true, $_bg, $_bc);
    box-shadow: none;
  }

  @else if $t==backdrop-insensitive-active {
  // backdrop insensitive pushed button
  //
    $_bg: null;
    $_bc: if($c != $button_bg_color, _backdrop_color(_border_color($c)), $backdrop_borders_color);
    @if $c == $headerbar_bg_color { $_bg: mix($c, $headerbar_bg_color, 85%); }
    @else { $_bg: mix(if($c == $button_bg_color, $c, _backdrop_color($c)), $base_color, 85%); }
  //
    label { color: if($c != $button_bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color); }
    box-shadow: none;
    background-color: $_bg;
    border-color: if($flat==true, $_bg, $_bc);
  }

  @else if $t==osd {
  //
  // normal osd button
  //
    $_bg: if($c != $button_bg_color, transparentize($c, 0.5), $osd_button_bg_color);

    color: $osd_fg_color;
    border-color: _border_color($_bg);
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: inset 0 -1px 1px _button_hilight_color($_bg);
    // text-shadow: 0 1px black;
    // -gtk-icon-shadow: 0 1px black;
    // outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-hover {
  //
  // active osd button
  //
    $_bg: if($c != $button_bg_color, transparentize($c, 0.3), lighten($osd_button_bg_color, 12%));

    color: white;
    border-color: _border_color($_bg);
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: inset 0 -1px 1px _button_hilight_color($_bg);
    // text-shadow: 0 1px black;
    // -gtk-icon-shadow: 0 1px black;
    // outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-active {
  //
  // active osd button
  //
    $_bg: if($c != $button_bg_color, $c, $osd_button_bg_color);

    color: white;
    border-color: _border_color($_bg);
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: inset 0 2px 3px -1px $_pressed;
    // text-shadow: none;
    // -gtk-icon-shadow: none;
    // outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    background-color: $osd_insensitive_bg_color;
    border-color: _border_color($osd_insensitive_bg_color);
    background-clip: padding-box;
    box-shadow: none;
    // text-shadow: none;
    // -gtk-icon-shadow: none;
  }

  @else if $t==osd-backdrop {
  //
  // backdrop osd button
  //
    $_bg: if($c != $button_bg_color, transparentize($c, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    border-color: _border_color($_bg);
    background-color: $_bg;
    background-clip: padding-box;
    box-shadow: none;
    // text-shadow: none;
    // -gtk-icon-shadow: none;
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    background-image: none;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.93)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: transparentize(black, 0.8);
  $_undershoot_color_light: transparentize(white, 0.8);

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
  box-shadow: none;
}
